#@ load("@ytt:data", "data")
#@ load("util.star", "util")

#@ d = data.values
#@ ap = d.application
#@ sftp = ap.paperless.sftp
#@ name = d.myks.context.app
#@ host = name + "." + d.environment.host
#@ secret_name = name + "-sftp"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  selector:
    matchLabels:
      app: #@ name
  template:
    metadata:
      labels:
        app: #@ name
    spec:
      #! With enableServiceLinks set to true, Kubernetes shadows PAPERLESS_PORT with a service link.
      #! This breaks the paperless container, which expects PAPERLESS_PORT to be an integer.
      #! See https://github.com/paperless-ngx/paperless-ngx/issues/264
      enableServiceLinks: false
      containers:
        - name: #@ name
          image: #@ ap.paperless.image
          env:
            - name: PAPERLESS_DBPASS
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: password
            #@ for/end envvar in util.map_to_envs(ap.paperless.env):
            -  #@ envvar
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          ports:
            - containerPort: 8000
              name: http
          volumeMounts:
            - name: data
              mountPath: /usr/src/paperless/data
            - name: media
              mountPath: /usr/src/paperless/media
            - name: consume
              mountPath: /usr/src/paperless/consume
        - name: sftp
          image: #@ sftp.image
          env:
            #! The UID and GID are set to the same value as the paperless container.
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: USER_NAME
              value: #@ sftp.user
            - name: PUBLIC_KEY
              value: #@ sftp.public_key
            - name: LOG_STDOUT
              value: "true"
          ports:
            - containerPort: 2222
              name: sftp
          volumeMounts:
            - name: consume
              mountPath: /srv/consume
            - name: sftp-init
              mountPath: /config/custom-cont-init.d
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data
        - name: media
          persistentVolumeClaim:
            claimName: media
        - name: consume
          emptyDir: {}
        - name: sftp-init
          configMap:
            name: #@ name + "-sftp-init.d"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ name + "-sftp-init.d"
data: #@ sftp.files

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ ap.paperless.storage.data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ ap.paperless.storage.media

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  selector:
    app: #@ name
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: sftp
      port: 2222
      targetPort: sftp

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: #@ name
spec:
  routes:
    - match: #@ "Host(`{}`)".format(host)
      kind: Rule
      middlewares:
        - name: chain-authelia-auth
          namespace: authelia
      services:
        - name: #@ name
          port: http

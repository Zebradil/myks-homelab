#@ load("@ytt:data", "data")

#@ d = data.values
#@ ap = d.application
#@ name = d.myks.context.app
#@ pvcs = dict(ap.storage)
#@ fb_port = "http-fb"
#@ tr_port = "http-tr"

#@ for/end id, cfg in pvcs.items():
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-" + id
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ cfg.size

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: #@ name
  template:
    metadata:
      labels:
        app: #@ name
    spec:
      nodeName: #@ ap.nodeName
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        supplementalGroups: #@ ap.supplementalGroups
      containers:
        - name: jellyfin
          image: #@ ap.image
          securityContext:
            privileged: true
          ports:
            - name: http
              containerPort: 8096
          volumeMounts:
            - name: render-device
              mountPath: /dev/dri/renderD128
            #@ for/end id, cfg in pvcs.items():
            - name: #@ id
              mountPath: #@ cfg.path
          livenessProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 5
        #@ if/end ap.filebrowser.enabled:
        - name: filebrowser
          image: #@ ap.filebrowser.image
          env:
            - name: FB_DATABASE
              value: /database/database.db
          ports:
            - name: #@ fb_port
              containerPort: 80
          volumeMounts:
            - name: filebrowser-db
              mountPath: /database
            - name: media
              mountPath: /srv/media
          livenessProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 30
            periodSeconds: 5
        #@ if/end ap.torrent.enabled:
        - name: torrent
          image: #@ ap.torrent.image
          env:
            - name: WEBUI_PORT
              value: '8080'
          ports:
            - name: #@ tr_port
              containerPort: 8080
          volumeMounts:
            - name: media
              mountPath: /data
            - name: torrent-config
              mountPath: /config
      #@ if ap.wireguard.enabled:
      initContainers:
        - name: wireguard-config
          command:
            - sh
            - -c
            - echo "$WG0_CONF" > /config/wg0.conf
          env:
            - name: WG0_CONF
              valueFrom:
                secretKeyRef:
                  key: wg0.conf
                  name: #@ name + "-wireguard-config"
          image: busybox:1.36.1
          volumeMounts:
            - name: wireguard-config
              mountPath: /config
        - name: wireguard
          #! NOTE: Experimental SidecarContainers feature gate, requires k8s 1.29
          #! https://kubernetes.io/docs/concepts/workloads/pods/sidecar-containers/
          restartPolicy: Always
          image: #@ ap.wireguard.image
          env:
            - name: PUID
              value: '1000'
            - name: PGID
              value: '1000'
            - name: TZ
              value: Etc/UTC
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /config
      #@ end
      volumes:
        - name: render-device
          hostPath:
            path: /dev/dri/renderD128
            type: CharDevice
        #@ for/end id, cfg in pvcs.items():
        - name: #@ id
          persistentVolumeClaim:
            claimName: #@ name + "-" + id
        #@ if/end ap.filebrowser.enabled:
        - name: filebrowser-db
          persistentVolumeClaim:
            claimName: #@ name + "-filebrowser-db"
        #@ if/end ap.torrent.enabled:
        - name: torrent-config
          persistentVolumeClaim:
            claimName: #@ name + "-torrent-config"
        #@ if/end ap.wireguard.enabled:
        - name: wireguard-config
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: #@ name

#@ if ap.filebrowser.enabled:
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-filebrowser-db"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: #@ name + "-filebrowser"
spec:
  ports:
    - name: http
      port: 80
      targetPort: #@ fb_port
  selector:
    app: #@ name
#@ end

#@ if ap.torrent.enabled:
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-torrent-config"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: #@ name + "-torrent"
spec:
  ports:
    - name: http
      port: 80
      targetPort: #@ tr_port
  selector:
    app: #@ name
#@ end

#@ if/end ap.wireguard.enabled:
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ name + "-wireguard-config"
type: Opaque
stringData:
  wg0.conf: #@ ap.wireguard.config

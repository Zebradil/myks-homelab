#@ load("@ytt:data", "data")

#@ d = data.values
#@ ap = d.application
#@ name = d.myks.context.app
#@ pvcs = dict(ap.storage)
#@ fb_port = "http-fb"

#@ for/end id, cfg in pvcs.items():
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-" + id
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ cfg.size

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: #@ name
  template:
    metadata:
      labels:
        app: #@ name
    spec:
      #!securityContext:
      #!  supplementalGroups: #@ ap.supplementalGroups
      containers:
        - name: jellyfin
          image: #@ ap.image
          ports:
            - name: http
              containerPort: 8096
          volumeMounts:
            #@ for/end id, cfg in pvcs.items():
            - name: #@ id
              mountPath: #@ cfg.path
          livenessProbe:
            tcpSocket:
              port: 8096
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 8096
            failureThreshold: 3
          startupProbe:
            tcpSocket:
              port: 8096
            failureThreshold: 30
            periodSeconds: 5
        #@ if/end ap.filebrowser.enabled:
        - name: filebrowser
          image: #@ ap.filebrowser.image
          env:
            - name: FB_DATABASE
              value: /database/database.db
          ports:
            - name: #@ fb_port
              containerPort: 80
          volumeMounts:
            - name: filebrowser-db
              mountPath: /database
            - name: media
              mountPath: /srv/media
          livenessProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: #@ fb_port
            failureThreshold: 30
            periodSeconds: 5
      volumes:
        #@ for/end id, cfg in pvcs.items():
        - name: #@ id
          persistentVolumeClaim:
            claimName: #@ name + "-" + id
        #@ if/end ap.filebrowser.enabled:
        - name: "filebrowser-db"
          persistentVolumeClaim:
            claimName: #@ name + "-filebrowser-db"

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: #@ name

#@ if ap.filebrowser.enabled:
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-filebrowser-db"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: #@ name + "-filebrowser"
spec:
  ports:
    - name: http
      port: 80
      targetPort: #@ fb_port
  selector:
    app: #@ name
#@ end

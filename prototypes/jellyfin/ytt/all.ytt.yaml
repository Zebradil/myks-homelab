#@ load("@ytt:data", "data")
#@ load("util.star", "util")

#@ d = data.values
#@ ap = d.application
#@ name = d.myks.context.app
#@ pvcs = dict(ap.storage)

#@ for/end id, cfg in pvcs.items():
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ name + "-" + id
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ cfg.size

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: #@ name
  template:
    metadata:
      labels:
        app: #@ name
    spec:
      #!securityContext:
      #!  supplementalGroups: #@ ap.supplementalGroups
      containers:
        - name: jellyfin
          image: #@ ap.image
          ports:
            - name: http
              containerPort: 8096
              protocol: TCP
          volumeMounts:
            #@ for/end id, cfg in pvcs.items():
            - name: #@ id
              mountPath: #@ cfg.path
          livenessProbe:
            tcpSocket:
              port: 8096
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8096
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8096
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
      volumes:
        #@ for/end id, cfg in pvcs.items():
        - name: #@ id
          persistentVolumeClaim:
            claimName: #@ name + "-" + id

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: #@ name

#@ load("secrets.star", "sec")
#@ host = "oci.zebradil.dev"
#@ registry_user = "zebradil"
---
expose:
  tls:
    enabled: false
  ingress:
    hosts:
      core: #@ host
externalURL: #@ "https://" + host
persistence:
  persistentVolumeClaim:
    registry:
      size: 5Gi
    jobservice:
      jobLog:
        size: 1Gi
    database:
      size: 1Gi
    redis:
      size: 1Gi
    trivy:
      size: 5Gi

#! The initial password of Harbor admin. Change it from portal after launching Harbor
harborAdminPassword: #@ sec.sops("1", "harborAdminPassword")

ipFamily:
  #! ipv6Enabled set to true if ipv6 is enabled in cluster, currently it affected the nginx related component
  ipv6:
    enabled: false

#! The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
#! Set it as "Recreate" when "RWM" for volumes isn't supported
updateStrategy:
  type: Recreate

#! The secret key used for encryption. Must be a string of 16 chars.
secretKey: #@ sec.sops("1", "secretKey")

metrics:
  enabled: true
  serviceMonitor:
    enabled: true

core:
  #! Secret is used when core server communicates with other components.
  #! Must be a string of 16 chars.
  secret: #@ sec.sops("1", "coreSecret")
  #! If not specifying a preexisting secret, a secret can be created from tokenKey and tokenCert and used instead.
  #! If none of secretName, tokenKey, and tokenCert are specified, an ephemeral key and certificate will be autogenerated.
  #! tokenKey and tokenCert must BOTH be set or BOTH unset.
  tokenKey: #@ sec.sops("1", "coreTokenKey")
  tokenCert: #@ sec.sops("1", "coreTokenCert")
  #! The XSRF key. Will be generated automatically if it isn't specified
  #! While you specified, Please make sure it is 32 characters, otherwise would have validation issue at the harbor-core runtime
  #! https://github.com/goharbor/harbor/pull/21154
  xsrfKey: #@ sec.sops("1", "xsrfKey")

  #! NOTE: Check GDPR settings later
  #!gdpr:
  #!  deleteUser: false
  #!  auditLogsCompliant: false

jobservice:
  #! Secret is used when job service communicates with other components.
  #! If a secret key is not specified, Helm will generate one.
  #! Must be a string of 16 chars.
  secret: #@ sec.sops("1", "jobserviceSecret")

registry:
  #! Secret is used to secure the upload state from client
  #! and registry storage backend.
  #! See: https://github.com/distribution/distribution/blob/release/2.8/docs/configuration.md#http
  #! If a secret key is not specified, Helm will generate one.
  #! Must be a string of 16 chars.
  secret: #@ sec.sops("1", "registrySecret")
  credentials:
    username: #@ registry_user
    htpasswdString: #@ registry_user + ":" + sec.sops("1", "registryHtpasswd")

database:
  internal:
    #! The initial superuser password for internal database
    password: #@ sec.sops("1", "databasePassword")

#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ a = data.values.application
#@ e = data.values.environment
#@ m = data.values.myks

#@ name = a.name or m.context.app

#@ pod_labels = { "app.kubernetes.io/name": name }

#@ pvc_name = "cache"
#@ cache_path = "/var/cache/pacoloco"

#@ cm_name = "config"
#@ pacoloco_config_name = "pacoloco.yaml"

---
#@ def get_config():
#! See https://github.com/anatol/pacoloco/blob/master/pacoloco.yaml.sample
download_timeout: #@ 60 * 10
purge_files_after: #@ 60 * 60 * 24 * 30
repos:
  archlinux:
    urls:
      - http://mirror.lty.me/archlinux
      - http://mirrors.kernel.org/archlinux
prefetch:
  #! Prefetch every day at 3:00 AM
  #! See https://github.com/gorhill/cronexpr#implementation
  cron: 0 0 3 * * * *
#@ end

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ cm_name
data: #@ { pacoloco_config_name: yaml.encode(get_config()) }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ pvc_name
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ a.storageSize
  storageClassName: local-path

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  selector:
    matchLabels: #@ pod_labels
  template:
    metadata:
      labels: #@ pod_labels
    spec:
      containers:
        - image: #@ a.image
          name: #@ name
          ports:
            - containerPort: #@ a.containerPort
              name: http
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            #!runAsGroup: 1000
            #!runAsNonRoot: true
            #!runAsUser: 1000
          volumeMounts:
            - name: #@ cm_name
              mountPath: #@ "/etc/" + pacoloco_config_name
              subPath: #@ pacoloco_config_name
              readOnly: true
            - name: #@ pvc_name
              mountPath: #@ cache_path
      volumes:
        - name: #@ cm_name
          configMap:
            name: #@ cm_name
        - name: #@ pvc_name
          persistentVolumeClaim:
            claimName: #@ pvc_name

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector: #@ pod_labels

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #@ name
spec:
  rules:
    #@ for/end host in e.hosts:
    - host: #@ name + "." + host
      http:
        paths:
          - backend:
              service:
                name: #@ name
                port:
                  name: http
            path: /
            pathType: Prefix

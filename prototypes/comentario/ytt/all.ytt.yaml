#@ load("@ytt:data", "data")
#@ load("@ytt:md5", "md5")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")

#@ a = data.values.application
#@ e = data.values.environment
#@ m = data.values.myks

#@ name = a.name or m.context.app

#@ pod_labels = { "app.kubernetes.io/name": name }

#@ pvc_name = "data"
#@ data_path = "/data"
#@ database_path = data_path + "/comentario.sqlite3"

#@ def build_secrets(secrets):
#@   secrets["sqlite3"] = { "file": database_path }
#@   return secrets
#@ end

#@ secret_name = "secrets"
#@ secrets_name = "secrets.yaml"
#@ secrets_yaml = yaml.encode(build_secrets(struct.decode(a.secrets)))
#@ secrets_path = "/etc/" + name + "/" + secrets_name

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ secret_name
stringData: #@ { secrets_name: secrets_yaml }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: #@ pvc_name
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: #@ a.storageSize

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ name
spec:
  selector:
    matchLabels: #@ pod_labels
  strategy:
    type: Recreate
  template:
    metadata:
      labels: #@ pod_labels
      annotations:
        checksum/secrets: #@ md5.sum(secrets_yaml + a.secretsVersion)
    spec:
      containers:
        - image: #@ a.image
          name: #@ name
          command:
            - /comentario/comentario
          args:
            - --verbose
          env:
            - name: HOST
              value: 0.0.0.0
            - name: PORT
              value: #@ str(a.containerPort)
            - name: SECRETS_FILE
              value: #@ secrets_path
          ports:
            - containerPort: #@ a.containerPort
              name: http
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
            - name: #@ secret_name
              mountPath: #@ secrets_path
              subPath: #@ secrets_name
              readOnly: true
            - name: #@ pvc_name
              mountPath: #@ data_path
      volumes:
        - name: #@ secret_name
          secret:
            secretName: #@ secret_name
        - name: #@ pvc_name
          persistentVolumeClaim:
            claimName: #@ pvc_name

---
apiVersion: v1
kind: Service
metadata:
  name: #@ name
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector: #@ pod_labels

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #@ name
spec:
  rules:
    #@ for/end host in e.hosts:
    - host: #@ name + "." + host
      http:
        paths:
          - backend:
              service:
                name: #@ name
                port:
                  name: http
            path: /
            pathType: Prefix

#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")

#@ def gen_host_matches(name, hosts):
#@   matches = []
#@   for host in hosts:
#@     matches.append("Host(`{}.{}`)".format(name, host))
#@   end
#@   return " || ".join(matches)
#@ end

#@ def gen_protected_ingress_route(name, hosts, entrypoints=[]):
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: #@ name + "-protected"
spec:
  #@ if/end entrypoints:
  entryPoints: #@ entrypoints
  routes:
    - match: #@ gen_host_matches(name, hosts)
      kind: Rule
      middlewares:
        - name: chain-authelia-auth
          namespace: authelia
      services:
        - name: #@ name
          port: http
#@ end

---
#@ def gen_ingress_route(name, hosts, entrypoints=[], suffix=""):
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: #@ name + suffix
spec:
  #@ if/end entrypoints:
  entryPoints: #@ entrypoints
  routes:
    - match: #@ gen_host_matches(name, hosts)
      kind: Rule
      services:
        - name: #@ name
          port: http
#@ end

---
#@ def gen_default_routes(name):
#@   t = data.values.environment.traefik
#@   return [
#@     gen_protected_ingress_route(name, t.hosts.web, ["web", "websecure"]),
#@     gen_ingress_route(name, t.hosts.lan, ["lan-web", "lan-websecure"], "-lan"),
#@     gen_ingress_route(name, t.hosts.vpn, ["vpn-web", "vpn-websecure"], "-vpn"),
#@   ]
#@ end

#@ route = struct.make(
#@   protected=gen_protected_ingress_route,
#@   unprotected=gen_ingress_route,
#@   default=gen_default_routes,
#@ )
